@page "/painel"
@using System.Linq
@using TriagemCaminhaoApp.Components.Data
@inject HttpClient Http
@implements IDisposable


<style>
    .bg-attending {
        background-color: #03DAC5; /* Cor dourada para destacar */
        color: black; /* Cor do texto */
    }
</style>

<MudGrid>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="d-flex flex-column" Style="height: 100%; background-color: lightblue; border-top-left-radius: 0px; border-top-right-radius: 0px">
            <MudText Style="font-weight:bolder" GutterBottom="true" Typo="Typo.h1" Align="Align.Center">Doca 01</MudText>
            @foreach (var triagem in triagensDoca01)
            {
                <MudPaper Square="true"  Elevation="1" Class="@GetCardClass(triagem, triagensDoca01)" Style="padding: 16px; margin-bottom: 16px;">
                    <MudText Style="font-weight:bolder" Typo="Typo.h2" Align="Align.Center">@triagem.Id</MudText>
                    <MudText Style="font-weight:bolder" Typo="Typo.h6" Align="Align.Center">@triagem.Caminhao.NomeTransportadora</MudText>
                </MudPaper>
            }
        </MudPaper>
    </MudItem>

    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="d-flex flex-column" Style="height: 100%; background-color: lightgreen; border-top-left-radius: 0px; border-top-right-radius: 0px">
            <MudText Style="font-weight:bolder" GutterBottom="true" Typo="Typo.h1" Align="Align.Center">Doca 02</MudText>
            @foreach (var triagem in triagensDoca02)
            {
                <MudPaper Square="true" Elevation="1" Class="@GetCardClass(triagem, triagensDoca02)" Style="padding: 16px; margin-bottom: 16px;">
                    <MudText Style="font-weight:bolder" Typo="Typo.h2" Align="Align.Center">@triagem.Id</MudText>
                    <MudText Style="font-weight:bolder" Typo="Typo.h6" Align="Align.Center">@triagem.Caminhao.NomeTransportadora</MudText>
                </MudPaper>
            }
        </MudPaper>
    </MudItem>

    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="d-flex flex-column" Style="height: 100%; background-color: lightcoral; border-top-left-radius: 0px; border-top-right-radius: 0px">
            <MudText Style="font-weight:bolder" GutterBottom="true" Typo="Typo.h1" Align="Align.Center">Doca 03</MudText>
            @foreach (var triagem in triagensDoca03)
            {
                <MudPaper Square="true" Elevation="1" Class="@GetCardClass(triagem, triagensDoca03)" Style="padding: 16px; margin-bottom: 16px;">
                    <MudText Style="font-weight:bolder" Typo="Typo.h2" Align="Align.Center">@triagem.Id</MudText>
                    <MudText Style="font-weight:bolder" Typo="Typo.h6" Align="Align.Center">@triagem.Caminhao.NomeTransportadora</MudText>
                </MudPaper>
            }
        </MudPaper>
    </MudItem>

    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="d-flex flex-column" Style="height: 100%; background-color: lightgoldenrodyellow; border-top-left-radius: 0px; border-top-right-radius: 0px">
            <MudText Style="font-weight:bolder" GutterBottom="true" Typo="Typo.h1" Align="Align.Center">Doca 04</MudText>
            @foreach (var triagem in triagensDoca04)
            {
                <MudPaper Square="true" Elevation="1" Class="@GetCardClass(triagem, triagensDoca04)" Style="padding: 16px; margin-bottom: 16px">
                    <MudText Style="font-weight:bolder" Typo="Typo.h3" Align="Align.Center">@triagem.Id</MudText>
                    <MudText Style="font-weight:bolder" Typo="Typo.h6" Align="Align.Center">@triagem.Caminhao.NomeTransportadora</MudText>
                </MudPaper>
            }
        </MudPaper>
    </MudItem>


    <!-- Novo item para exibir os cards "Aguardando" com alinhamento horizontal -->
    <MudItem xs="12">
        <MudPaper Class="d-flex align-items-center" Style="height: 100%; background-color: lightgray; padding: 8px;">
            <!-- Nome "Aguardando" na lateral esquerda -->
            <MudText Style="font-weight:bolder; margin-right: 16px;" Typo="Typo.h1" Align="Align.Left">Aguardando</MudText>
            <br>
            <!-- Cards "Aguardando" em fila horizontal -->
            <div class="d-flex flex-row flex-wrap">
                @foreach (var triagem in triagensAguardando)
                {
                    <MudPaper Square="true" Elevation="1" Style="padding: 30px; margin-right: 8px; min-width: 80px;">
                        <MudText Style="font-weight:bolder" Typo="Typo.h4" Align="Align.Center">@triagem.Id</MudText>
                            <MudText Style="font-weight:bolder" Typo="Typo.h6" Align="Align.Center">@triagem.Caminhao.NomeTransportadora</MudText>
                    </MudPaper>
                }
            </div>
        </MudPaper>
    </MudItem>

</MudGrid>

@code {
    private List<Triagem> triagens = new List<Triagem>();
    private List<Triagem> triagensDoca01 = new List<Triagem>();
    private List<Triagem> triagensDoca02 = new List<Triagem>();
    private List<Triagem> triagensDoca03 = new List<Triagem>();
    private List<Triagem> triagensDoca04 = new List<Triagem>();
    private List<Triagem> triagensAguardando = new List<Triagem>();
    private List<Triagem> triagensOrdenadas;
    private Timer timer;

    protected override async Task OnInitializedAsync()
    {
        await GetTriagens();

        timer = new System.Threading.Timer(async (object? stateInfo) =>
        {
            await InvokeAsync(() =>
            {
                OnTimerElapsed();
                StateHasChanged(); // NOTE: MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT                
            });

        }, new System.Threading.AutoResetEvent(false), 10000, 10000); 
    }

    private async Task GetTriagens()
    {
        // Obtenha as triagens da API
        triagens = await Http.GetFromJsonAsync<List<Triagem>>("http://localhost:5069/api/Triagems");

        // Separando as triagens para cada doca

        var filtradoTriagens = triagens
        .Where(t => t.StatusTriagem.Status != "Atendido")
        .ToList();

        // Passo 2: Ordenar a lista filtrada por Prioridade e depois por ID
        triagensOrdenadas = filtradoTriagens
            .OrderByDescending(t => t.PrioridadeTriagem.IsPrioridade) // Coloca as triagens com prioridade primeiro
            .ThenBy(t => t.Id) // Ordena por ID
            .ToList();


        // Separando as triagens para cada doca
        triagensDoca01 = triagensOrdenadas.Where(t => t.Doca?.NomeDoca == "Doca 01").Take(4).ToList();
        triagensDoca02 = triagensOrdenadas.Where(t => t.Doca?.NomeDoca == "Doca 02").Take(4).ToList();
        triagensDoca03 = triagensOrdenadas.Where(t => t.Doca?.NomeDoca == "Doca 03").Take(4).ToList();
        triagensDoca04 = triagensOrdenadas.Where(t => t.Doca?.NomeDoca == "Doca 04").Take(4).ToList();
        triagensAguardando = triagensOrdenadas.Where(t => t.Doca == null).ToList();
    }

    private async Task OnTimerElapsed()
    {
        // Método que será chamado pelo timer
        GetTriagens();
        // Adicione a lógica para atualizar a página ou buscar novos dados
        await Task.CompletedTask;
    }

    public void Dispose()
    {
        // Limpa o timer quando o componente for descartado
        timer?.Dispose();
    }

    private string GetCardClass(Triagem triagem, List<Triagem> triagensDoca)
    {
        // Se a triagem for a primeira da lista (a que está sendo atendida), altere a cor de fundo
        if (triagensDoca.FirstOrDefault() == triagem)
        {
            return "bg-attending"; // Classe CSS que define a cor de fundo do cartão sendo atendido
        }
        return string.Empty;
    }
}
